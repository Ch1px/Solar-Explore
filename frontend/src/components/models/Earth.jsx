/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 earth.gltf --transform
Author: BamPistache (https://sketchfab.com/karinkreeft8)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/earth-0caafb7e837047a688a3e504c0ea74af
Title: Earth
*/

import React, { useRef, useEffect } from 'react'
import { useFrame, useThree } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import gsap from 'gsap';

export default function Model(props) {
  const { nodes, materials } = useGLTF('/src/assets/models/earth-transformed.glb')
  const earth = useRef();

  const { camera } = useThree();

  useEffect(() => {
    function handleMouseMove(event) {
      const { clientX, clientY } = event;

      // Calculate the rotation and scale based on mouse position
      const mouse = {
        x: (clientY / window.innerHeight) * Math.PI - Math.PI / 2,
        y: (clientX / window.innerWidth) * Math.PI * 2,
        z: 0,
      };

      // Use GSAP to animate the rotation and scale
      gsap.to(earth.current.rotation, {
        x: -mouse.y * 0.3,
        duration: 3
      });
    }

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);

  useFrame(() => {
    earth.current.rotation.y += 0.001
  });

  return (
    <group ref={earth} {...props} dispose={null}>
      <group scale={0.2}>
      <mesh geometry={nodes.earth4_blinn1_0.geometry} material={materials.blinn1} />
      <mesh geometry={nodes.earth4_lambert1_0.geometry} material={materials.lambert1} />
      </group>
    </group>
  )
}

useGLTF.preload('/src/assets/models/earth-transformed.glb')
